
Stm32F401RCT6_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000458  08000460  00001460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000458  08000458  00001460  2**0
                  CONTENTS
  4 .ARM          00000000  08000458  08000458  00001460  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000458  08000460  00001460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000458  08000458  00001458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800045c  0800045c  0000145c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000460  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000460  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000484  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001be  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00001ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004d  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000be8  00000000  00000000  00001b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000002eb  00000000  00000000  00002785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000034c9  00000000  00000000  00002a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00005f39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e0  00000000  00000000  00005f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000440 	.word	0x08000440

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000440 	.word	0x08000440

080001d4 <RCC_Init>:
 */


#include "RCC_Interface.h"

void RCC_Init(void){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
#if RCC_Clock == RCC_HSE
	/*Enable clock*/
	Set_Bit(RCC_Registers->CR,HSEON);
 80001da:	4b16      	ldr	r3, [pc, #88]	@ (8000234 <RCC_Init+0x60>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a15      	ldr	r2, [pc, #84]	@ (8000234 <RCC_Init+0x60>)
 80001e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80001e4:	6013      	str	r3, [r2, #0]
	/*wait until it stable*/
	while(Get_Bit(RCC_Registers->CR,HSERDY));
 80001e6:	bf00      	nop
 80001e8:	4b12      	ldr	r3, [pc, #72]	@ (8000234 <RCC_Init+0x60>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d1f9      	bne.n	80001e8 <RCC_Init+0x14>
	/*choose the clock source*/
	uint32 temp_CFGR = RCC_Registers->CFGR ;
 80001f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000234 <RCC_Init+0x60>)
 80001f6:	689b      	ldr	r3, [r3, #8]
 80001f8:	607b      	str	r3, [r7, #4]
	temp_CFGR &=(~((uint32)LS2B_MASK));
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f023 0303 	bic.w	r3, r3, #3
 8000200:	607b      	str	r3, [r7, #4]
	temp_CFGR |= (uint32)CLOCK_Select ;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f043 0301 	orr.w	r3, r3, #1
 8000208:	607b      	str	r3, [r7, #4]
	RCC_Registers->CFGR = temp_CFGR;
 800020a:	4a0a      	ldr	r2, [pc, #40]	@ (8000234 <RCC_Init+0x60>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	6093      	str	r3, [r2, #8]
	/*close other sources*/
	Clr_Bit(RCC_Registers->CR,HSION);
 8000210:	4b08      	ldr	r3, [pc, #32]	@ (8000234 <RCC_Init+0x60>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a07      	ldr	r2, [pc, #28]	@ (8000234 <RCC_Init+0x60>)
 8000216:	f023 0301 	bic.w	r3, r3, #1
 800021a:	6013      	str	r3, [r2, #0]
	Clr_Bit(RCC_Registers->CR,PLLON);
 800021c:	4b05      	ldr	r3, [pc, #20]	@ (8000234 <RCC_Init+0x60>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a04      	ldr	r2, [pc, #16]	@ (8000234 <RCC_Init+0x60>)
 8000222:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000226:	6013      	str	r3, [r2, #0]
	RCC_Registers->CFGR = temp_CFGR;
	/*close other sources*/
	Clr_Bit(RCC_Registers->CR,HSEON);
	Clr_Bit(RCC_Registers->CR,HSION);
#endif
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	40023800 	.word	0x40023800

08000238 <RCC_Enable_peripheral>:
void RCC_Enable_peripheral(uint8 Desired_Bus ,uint8 peripheral){
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	460a      	mov	r2, r1
 8000242:	71fb      	strb	r3, [r7, #7]
 8000244:	4613      	mov	r3, r2
 8000246:	71bb      	strb	r3, [r7, #6]

switch(Desired_Bus){
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	2b03      	cmp	r3, #3
 800024c:	d836      	bhi.n	80002bc <RCC_Enable_peripheral+0x84>
 800024e:	a201      	add	r2, pc, #4	@ (adr r2, 8000254 <RCC_Enable_peripheral+0x1c>)
 8000250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000254:	08000265 	.word	0x08000265
 8000258:	0800027b 	.word	0x0800027b
 800025c:	08000291 	.word	0x08000291
 8000260:	080002a7 	.word	0x080002a7
case AHP1 :
	Set_Bit(RCC_Registers->AHB1ENR , peripheral);
 8000264:	4b18      	ldr	r3, [pc, #96]	@ (80002c8 <RCC_Enable_peripheral+0x90>)
 8000266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000268:	79ba      	ldrb	r2, [r7, #6]
 800026a:	2101      	movs	r1, #1
 800026c:	fa01 f202 	lsl.w	r2, r1, r2
 8000270:	4611      	mov	r1, r2
 8000272:	4a15      	ldr	r2, [pc, #84]	@ (80002c8 <RCC_Enable_peripheral+0x90>)
 8000274:	430b      	orrs	r3, r1
 8000276:	6313      	str	r3, [r2, #48]	@ 0x30
	break ;
 8000278:	e020      	b.n	80002bc <RCC_Enable_peripheral+0x84>
case AHP2 :
	Set_Bit(RCC_Registers->AHB2ENR , peripheral);
 800027a:	4b13      	ldr	r3, [pc, #76]	@ (80002c8 <RCC_Enable_peripheral+0x90>)
 800027c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800027e:	79ba      	ldrb	r2, [r7, #6]
 8000280:	2101      	movs	r1, #1
 8000282:	fa01 f202 	lsl.w	r2, r1, r2
 8000286:	4611      	mov	r1, r2
 8000288:	4a0f      	ldr	r2, [pc, #60]	@ (80002c8 <RCC_Enable_peripheral+0x90>)
 800028a:	430b      	orrs	r3, r1
 800028c:	6353      	str	r3, [r2, #52]	@ 0x34
	break;
 800028e:	e015      	b.n	80002bc <RCC_Enable_peripheral+0x84>
case APB1 :
	Set_Bit(RCC_Registers->APB1ENR , peripheral);
 8000290:	4b0d      	ldr	r3, [pc, #52]	@ (80002c8 <RCC_Enable_peripheral+0x90>)
 8000292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000294:	79ba      	ldrb	r2, [r7, #6]
 8000296:	2101      	movs	r1, #1
 8000298:	fa01 f202 	lsl.w	r2, r1, r2
 800029c:	4611      	mov	r1, r2
 800029e:	4a0a      	ldr	r2, [pc, #40]	@ (80002c8 <RCC_Enable_peripheral+0x90>)
 80002a0:	430b      	orrs	r3, r1
 80002a2:	6413      	str	r3, [r2, #64]	@ 0x40
	break;
 80002a4:	e00a      	b.n	80002bc <RCC_Enable_peripheral+0x84>
case APB2 :
	Set_Bit(RCC_Registers->APB2ENR , peripheral);
 80002a6:	4b08      	ldr	r3, [pc, #32]	@ (80002c8 <RCC_Enable_peripheral+0x90>)
 80002a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002aa:	79ba      	ldrb	r2, [r7, #6]
 80002ac:	2101      	movs	r1, #1
 80002ae:	fa01 f202 	lsl.w	r2, r1, r2
 80002b2:	4611      	mov	r1, r2
 80002b4:	4a04      	ldr	r2, [pc, #16]	@ (80002c8 <RCC_Enable_peripheral+0x90>)
 80002b6:	430b      	orrs	r3, r1
 80002b8:	6453      	str	r3, [r2, #68]	@ 0x44
	break;
 80002ba:	bf00      	nop
}
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	40023800 	.word	0x40023800

080002cc <RCC_Disable_peripheral>:

void RCC_Disable_peripheral(uint8 Desired_Bus ,uint8 peripheral){
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	460a      	mov	r2, r1
 80002d6:	71fb      	strb	r3, [r7, #7]
 80002d8:	4613      	mov	r3, r2
 80002da:	71bb      	strb	r3, [r7, #6]
	switch(Desired_Bus){
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	2b03      	cmp	r3, #3
 80002e0:	d83a      	bhi.n	8000358 <RCC_Disable_peripheral+0x8c>
 80002e2:	a201      	add	r2, pc, #4	@ (adr r2, 80002e8 <RCC_Disable_peripheral+0x1c>)
 80002e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e8:	080002f9 	.word	0x080002f9
 80002ec:	08000311 	.word	0x08000311
 80002f0:	08000329 	.word	0x08000329
 80002f4:	08000341 	.word	0x08000341
	case AHP1 :
		Clr_Bit(RCC_Registers->AHB1ENR , peripheral);
 80002f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000364 <RCC_Disable_peripheral+0x98>)
 80002fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fc:	79ba      	ldrb	r2, [r7, #6]
 80002fe:	2101      	movs	r1, #1
 8000300:	fa01 f202 	lsl.w	r2, r1, r2
 8000304:	43d2      	mvns	r2, r2
 8000306:	4611      	mov	r1, r2
 8000308:	4a16      	ldr	r2, [pc, #88]	@ (8000364 <RCC_Disable_peripheral+0x98>)
 800030a:	400b      	ands	r3, r1
 800030c:	6313      	str	r3, [r2, #48]	@ 0x30
		break ;
 800030e:	e023      	b.n	8000358 <RCC_Disable_peripheral+0x8c>
	case AHP2 :
		Clr_Bit(RCC_Registers->AHB2ENR , peripheral);
 8000310:	4b14      	ldr	r3, [pc, #80]	@ (8000364 <RCC_Disable_peripheral+0x98>)
 8000312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000314:	79ba      	ldrb	r2, [r7, #6]
 8000316:	2101      	movs	r1, #1
 8000318:	fa01 f202 	lsl.w	r2, r1, r2
 800031c:	43d2      	mvns	r2, r2
 800031e:	4611      	mov	r1, r2
 8000320:	4a10      	ldr	r2, [pc, #64]	@ (8000364 <RCC_Disable_peripheral+0x98>)
 8000322:	400b      	ands	r3, r1
 8000324:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8000326:	e017      	b.n	8000358 <RCC_Disable_peripheral+0x8c>
	case APB1 :
		Clr_Bit(RCC_Registers->APB1ENR , peripheral);
 8000328:	4b0e      	ldr	r3, [pc, #56]	@ (8000364 <RCC_Disable_peripheral+0x98>)
 800032a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800032c:	79ba      	ldrb	r2, [r7, #6]
 800032e:	2101      	movs	r1, #1
 8000330:	fa01 f202 	lsl.w	r2, r1, r2
 8000334:	43d2      	mvns	r2, r2
 8000336:	4611      	mov	r1, r2
 8000338:	4a0a      	ldr	r2, [pc, #40]	@ (8000364 <RCC_Disable_peripheral+0x98>)
 800033a:	400b      	ands	r3, r1
 800033c:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 800033e:	e00b      	b.n	8000358 <RCC_Disable_peripheral+0x8c>
	case APB2 :
		Clr_Bit(RCC_Registers->APB2ENR , peripheral);
 8000340:	4b08      	ldr	r3, [pc, #32]	@ (8000364 <RCC_Disable_peripheral+0x98>)
 8000342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000344:	79ba      	ldrb	r2, [r7, #6]
 8000346:	2101      	movs	r1, #1
 8000348:	fa01 f202 	lsl.w	r2, r1, r2
 800034c:	43d2      	mvns	r2, r2
 800034e:	4611      	mov	r1, r2
 8000350:	4a04      	ldr	r2, [pc, #16]	@ (8000364 <RCC_Disable_peripheral+0x98>)
 8000352:	400b      	ands	r3, r1
 8000354:	6453      	str	r3, [r2, #68]	@ 0x44
		break;
 8000356:	bf00      	nop
	}
}
 8000358:	bf00      	nop
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	40023800 	.word	0x40023800

08000368 <main>:
//#include "../MCAL/RCC_Driver/RCC_Registers.h"
#include "../MCAL/RCC_Driver/RCC_Interface.h"
#include "../LIB/STD_Types.h"
#include "../LIB/Bit_Math.h"
int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	RCC_Init();
 800036c:	f7ff ff32 	bl	80001d4 <RCC_Init>
	RCC_Enable_peripheral(AHP1,RCC_AHB1ENR_GPIOA_EN);
 8000370:	2100      	movs	r1, #0
 8000372:	2000      	movs	r0, #0
 8000374:	f7ff ff60 	bl	8000238 <RCC_Enable_peripheral>

	RCC_Enable_peripheral(APB1,RCC_APB1ENR_TIM2EN);
 8000378:	2100      	movs	r1, #0
 800037a:	2002      	movs	r0, #2
 800037c:	f7ff ff5c 	bl	8000238 <RCC_Enable_peripheral>

	RCC_Enable_peripheral(APB2,RCC_APB2ENR_TIM9EN);
 8000380:	2110      	movs	r1, #16
 8000382:	2003      	movs	r0, #3
 8000384:	f7ff ff58 	bl	8000238 <RCC_Enable_peripheral>

	RCC_Disable_peripheral(AHP1,RCC_AHB1ENR_GPIOA_EN);
 8000388:	2100      	movs	r1, #0
 800038a:	2000      	movs	r0, #0
 800038c:	f7ff ff9e 	bl	80002cc <RCC_Disable_peripheral>

	RCC_Disable_peripheral(APB1,RCC_APB1ENR_TIM2EN);
 8000390:	2100      	movs	r1, #0
 8000392:	2002      	movs	r0, #2
 8000394:	f7ff ff9a 	bl	80002cc <RCC_Disable_peripheral>

	RCC_Disable_peripheral(APB2,RCC_APB2ENR_TIM9EN);
 8000398:	2110      	movs	r1, #16
 800039a:	2003      	movs	r0, #3
 800039c:	f7ff ff96 	bl	80002cc <RCC_Disable_peripheral>

    while(1){
 80003a0:	bf00      	nop
 80003a2:	e7fd      	b.n	80003a0 <main+0x38>

080003a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a4:	480d      	ldr	r0, [pc, #52]	@ (80003dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003ac:	480c      	ldr	r0, [pc, #48]	@ (80003e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ae:	490d      	ldr	r1, [pc, #52]	@ (80003e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b0:	4a0d      	ldr	r2, [pc, #52]	@ (80003e8 <LoopForever+0xe>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b4:	e002      	b.n	80003bc <LoopCopyDataInit>

080003b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ba:	3304      	adds	r3, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c0:	d3f9      	bcc.n	80003b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c2:	4a0a      	ldr	r2, [pc, #40]	@ (80003ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c4:	4c0a      	ldr	r4, [pc, #40]	@ (80003f0 <LoopForever+0x16>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c8:	e001      	b.n	80003ce <LoopFillZerobss>

080003ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003cc:	3204      	adds	r2, #4

080003ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d0:	d3fb      	bcc.n	80003ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003d2:	f000 f811 	bl	80003f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003d6:	f7ff ffc7 	bl	8000368 <main>

080003da <LoopForever>:

LoopForever:
  b LoopForever
 80003da:	e7fe      	b.n	80003da <LoopForever>
  ldr   r0, =_estack
 80003dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e8:	08000460 	.word	0x08000460
  ldr r2, =_sbss
 80003ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003f0:	2000001c 	.word	0x2000001c

080003f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f4:	e7fe      	b.n	80003f4 <ADC_IRQHandler>
	...

080003f8 <__libc_init_array>:
 80003f8:	b570      	push	{r4, r5, r6, lr}
 80003fa:	4d0d      	ldr	r5, [pc, #52]	@ (8000430 <__libc_init_array+0x38>)
 80003fc:	4c0d      	ldr	r4, [pc, #52]	@ (8000434 <__libc_init_array+0x3c>)
 80003fe:	1b64      	subs	r4, r4, r5
 8000400:	10a4      	asrs	r4, r4, #2
 8000402:	2600      	movs	r6, #0
 8000404:	42a6      	cmp	r6, r4
 8000406:	d109      	bne.n	800041c <__libc_init_array+0x24>
 8000408:	4d0b      	ldr	r5, [pc, #44]	@ (8000438 <__libc_init_array+0x40>)
 800040a:	4c0c      	ldr	r4, [pc, #48]	@ (800043c <__libc_init_array+0x44>)
 800040c:	f000 f818 	bl	8000440 <_init>
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	10a4      	asrs	r4, r4, #2
 8000414:	2600      	movs	r6, #0
 8000416:	42a6      	cmp	r6, r4
 8000418:	d105      	bne.n	8000426 <__libc_init_array+0x2e>
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000420:	4798      	blx	r3
 8000422:	3601      	adds	r6, #1
 8000424:	e7ee      	b.n	8000404 <__libc_init_array+0xc>
 8000426:	f855 3b04 	ldr.w	r3, [r5], #4
 800042a:	4798      	blx	r3
 800042c:	3601      	adds	r6, #1
 800042e:	e7f2      	b.n	8000416 <__libc_init_array+0x1e>
 8000430:	08000458 	.word	0x08000458
 8000434:	08000458 	.word	0x08000458
 8000438:	08000458 	.word	0x08000458
 800043c:	0800045c 	.word	0x0800045c

08000440 <_init>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr

0800044c <_fini>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr
